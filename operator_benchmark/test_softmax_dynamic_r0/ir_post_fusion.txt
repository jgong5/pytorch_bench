buf0: SchedulerNode(ComputedBuffer)
buf0.writes = 
    [   MemoryDep(name='buf0', index=c0, size=(s1, s0)),
        MemoryDep(name='buf0', index=c0, size=(s1,))]
buf0.unmet_dependencies = []
buf0.met_dependencies = [MemoryDep(name='arg0_1', index=c0 + c1*s1, size=(s1, s0))]
buf0.group.device = cpu
buf0.group.iteration = ((s1,), (s0,))
buf0.sizes = ([s1], [s0])
class buf0_loop_body:
    var_ranges = {z0: s1, z1: s0}
    index0 = s1*z1 + z0
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg0_1', get_index)
        get_index_1 = self.get_index('index1')
        reduction = ops.reduction('buf0', torch.float32, torch.float32, 'max', get_index_1, load)
        return reduction


buf1: SchedulerNode(ComputedBuffer)
buf1.writes = 
    [   MemoryDep(name='buf1', index=c0, size=(s1, s0)),
        MemoryDep(name='buf1', index=c0, size=(s1,))]
buf1.unmet_dependencies = [MemoryDep(name='buf0', index=c0, size=(s1, s0))]
buf1.met_dependencies = [MemoryDep(name='arg0_1', index=c0 + c1*s1, size=(s1, s0))]
buf1.group.device = cpu
buf1.group.iteration = ((s1,), (s0,))
buf1.sizes = ([s1], [s0])
class buf1_loop_body:
    var_ranges = {z0: s1, z1: s0}
    index0 = s1*z1 + z0
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg0_1', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf0', get_index_1)
        sub = ops.sub(load, load_1)
        exp = ops.exp(sub)
        get_index_2 = self.get_index('index1')
        reduction = ops.reduction('buf1', torch.float32, torch.float32, 'sum', get_index_2, exp)
        return reduction


buf2: SchedulerNode(ComputedBuffer)
buf2.writes = [MemoryDep(name='buf2', index=c0, size=(s0*s1,))]
buf2.unmet_dependencies = 
    [   MemoryDep(name='buf0', index=c1, size=(s0, s1)),
        MemoryDep(name='buf1', index=c1, size=(s0, s1))]
buf2.met_dependencies = [MemoryDep(name='arg0_1', index=c0, size=(s0*s1,))]
buf2.group.device = cpu
buf2.group.iteration = ((s0, s1), ())
buf2.sizes = ([s0, s1], [])
class buf2_loop_body:
    var_ranges = {z0: s0, z1: s1}
    index0 = s1*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg0_1', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf0', get_index_1)
        sub = ops.sub(load, load_1)
        exp = ops.exp(sub)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf1', get_index_2)
        div = ops.div(exp, load_2)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf2', get_index_3, div, None)
        return store


